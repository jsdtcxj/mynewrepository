package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.longestPalindrome("ababd"));
//        s.rotate(matrix);
   }
	
	public String longestPalindrome(String s) {
	    if(s == null || s.length() == 0) return s;
	    String ans = s.substring(0);
	    int len = s.length();
	    for(int i = 0; i < len; i++) {
	        String str = search(i, i, s);
	        if(str.length() > ans.length()) {
	            ans = str;
	        }
	        if(i < len-1) {
	            str = search(i, i+1, s);
	            if(str.length() > ans.length()) {
	                ans = str;
	            }
	        }
	    }
	    return ans;
	}

	public String search(int left, int right, String s) {
	    while(left >=0 && right < s.length()) {
	        if(s.charAt(left) == s.charAt(right)) {
	            left--;
	            right++;
	        } else {
	            if(left+1 == right) {
	                return "";
	            }
	            break;
	        }
	    }
	    return s.substring(left+1, right);
	}
}
