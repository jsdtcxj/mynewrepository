package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.myAtoi("-91283472332"));
//        s.rotate(matrix);
   }
	
	public int myAtoi(String str) {
	    long ans = 0;
	    if(str != null) {
	        int index = 0, len = str.length();
	        while(index < len && str.charAt(index) == ' ') {
	            index++;
	        }
	        
	        if(index < len) {
	            char first = str.charAt(index);
	            if(first == '-' || first == '+') {
	                index++;
	            }
	            while(index < len) {
	                char c = str.charAt(index);
	                if(Character.isDigit(c)) {
	                    int num = c - '0';
	                    ans = ans*10+num;
	                    if((first == '-' && (0 - ans < Integer.MIN_VALUE)) ||
	                       (ans > Integer.MAX_VALUE)){
	                    	return (first == '-') ? Integer.MIN_VALUE : Integer.MAX_VALUE;
	                    }
	                } else {
	                    break;
	                }
	                index++;
	            }
	            ans = (first == '-') ? (0-ans) : ans;
	        }
	    }
	    return (int)ans;
	}
}
