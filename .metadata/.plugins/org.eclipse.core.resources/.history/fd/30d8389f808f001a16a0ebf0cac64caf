package org.fkit.hellotest;

import java.util.LinkedList;
import java.util.Stack;

public class TestTree {

	class TreeNode{
		public int val;
		public TreeNode left;
		public TreeNode right;
	}
	
	public static void main(String[] args) {
		int[] a = {1,2,3,4,5,6,7};
		TestTree t = new TestTree();
		TreeNode tree = t.arrayToTree(a);
		Stack<TreeNode> stack = new Stack<>();
		TreeNode node = tree;
		t.printTree(tree);
		while(node != null || !stack.isEmpty()) {
			if(node != null) {
				while(node != null) {
					stack.push(node);
					node = node.left;
				}
			} else {
				node = stack.pop();
				System.out.print(node.val + " ");
				node = node.right;
			}
		}
		
		System.out.println("***************************");
		TreeNode temp = t.new TreeNode();
		TreeNode root = temp;
		temp.val = 6;
		TreeNode left = t.new TreeNode();
		temp.left = left;
		left.val = 3;
		TreeNode right = t.new TreeNode();
		temp.right = right;
		right.val = -7;
		temp = left;
		left = t.new TreeNode();
		left.val = -1;
		temp.left = left;
		right = t.new TreeNode();
		right.val = 9;
		temp.right = right;
		t.calculate(root);
		System.out.println("Max: " + t.max);
		System.out.println("Node: " + t.rootVal);
		
		System.out.println("***************************");
		TreeNode head1 = t.treeToList(tree);
		while(head1 != null) {
			System.out.print(head1.val);
			head1 = head1.right;
		}
		System.out.println();
		TreeNode tail = t.prev;
		while(tail != null) {
			System.out.print(tail.val);
			tail = tail.left;
		}
	}
	
	public void printTree(TreeNode node) {
		LinkedList<TreeNode> queue = new LinkedList<>();
		queue.offer(node);
		while(!queue.isEmpty()) {
			int size = queue.size();
			for(int i = 0; i < size; i++) {
				TreeNode tree = queue.poll();
				System.out.print(tree.val);
				if(tree.left != null) queue.offer(tree.left);
				if(tree.right != null) queue.offer(tree.right);
			}
			System.out.println();
		}
	}
	
	public TreeNode arrayToTree(int[] a) {
		if(a == null || a.length == 0) return null;
		return buildTree(0, a.length-1, a);
	}
	
	public TreeNode buildTree(int start, int end, int[] a) {
		if(start <= end) {
			int mid = start + (end-start)/2;
			TreeNode node = new TreeNode();
			node.val = a[mid];
			node.left = buildTree(start, mid-1, a);
			node.right = buildTree(mid+1, end, a);
			return node;
		}
		return null;
	}
	
	public Integer max = null;
	public Integer rootVal = null;
	public int calculate(TreeNode node) {
		if(node == null) return 0;
		int val = node.val;
		int leftSum = calculate(node.left);
		int rightSum = calculate(node.right);
		int total = val+leftSum+rightSum;
		
		if(max == null || max < total) {
			max = total;
			rootVal = val;
		}
		
		return total;
	}
	
	public boolean matched = true;
	public void search(TreeNode node1, TreeNode node2) {
		if(matched) {
			if((node1 == null && node2 != null) || (node1 != null && node2 == null)) {
				matched = false;
			}
			
			if(matched && node1 != null) {
				if(node1.val != node2.val) {
					matched = false;
				}
				
				search(node1.left, node2.left);
				search(node1.right, node2.right);
			}
		}
	}
	
	public TreeNode head = null;
	public TreeNode prev = null;
	public TreeNode treeToList(TreeNode node) {
		if(node != null) {
			search(node);
		}
		return head;
	}
	
	public void search(TreeNode node) {
		if(node.left != null) {
			search(node.left);
		}
		
		TreeNode right = node.right;
		if(head == null) {
			head = node;
			head.left = null;
			prev = head;
		} else {
			node.left = prev;
			prev.right = node;
			prev = node;
		}
		
		if(node.right != null) {
			search(right);
		}
	}
}
