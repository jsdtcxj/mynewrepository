package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"bella","label","roller"};
        int[] A = {2,1,2,4,2,2};
        int[] B = {5,2,6,2,3,2};
        System.out.println(s.minDominoRotations(A,B));
//        s.rotate(matrix);
   }
	
	public int minDominoRotations(int[] A, int[] B) {
        int len = A.length, ans = len+1;
        int[][] mapping = new int[2][6];
        for(int i = 0; i < len; i++) {
            mapping[0][A[i]-1]++;
            mapping[1][B[i]-1]++;
        }
        for(int i = 0; i < 6; i++) {
            int numA = mapping[0][i];
            int numB = mapping[1][i];
            if(numA+numB >= len) {
                int duplicates = (numA+numB-len);
                for(int j = 0; j < len; j++) {
                    if(A[j] == (i+1) && A[j] == B[j]) {
                        duplicates--;
                    }
                    if(duplicates < 0) break;
                }
                if(duplicates >= 0)ans = Math.min(ans, Math.min(len-numA, len-numB));
            }
        }
        return (ans == len+1) ? -1 : ans;
    }
}
