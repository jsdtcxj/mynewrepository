package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] nums = {-1,0,1,2,-1,-4};
		System.out.println(s.divide(7, -3));
		
	}
	
	public int divide(int dividend, int divisor) {
        boolean negative = (dividend^divisor) < 0;
        boolean isMinValue = dividend == Integer.MIN_VALUE;
        if(divisor == -1) {
            return isMinValue ? Integer.MAX_VALUE : (0-dividend);
        } else if(divisor == 1) {
            return dividend;
        } else if(divisor == Integer.MIN_VALUE) {
            return isMinValue ? 1 : 0;
        }

        int dividend1 = (isMinValue) ? Integer.MAX_VALUE : Math.abs(dividend);
        int divisor1 = Math.abs(divisor);
        int temp = divisor1;
        int quotient = 0;
        int num = 1;
        while(dividend1 >= divisor1) {
        	divisor1 <<= 1;
        	num <<= 1;
        }
        
        while(dividend1 >= temp || temp > divisor) {
        	 temp >>= 1;
        	 num >>= 1;
        	 if(dividend1 >= temp) {
        		 dividend1 -= divisor;
        		 quotient += num;
        	 }
        }

        if(isMinValue) {
            if(dividend1+1 == divisor) quotient++;
        }

        return negative ? (0-quotient) : quotient;
    }
}
