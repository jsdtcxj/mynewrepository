package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'X','X','X','X'},{'X','O','O','X'},{'X','X','O','X'},{'X','O','X','X'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,9,20,15,7};
        int[] B = {9,3,15,20,7};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
        
//        System.out.println(s.solve(board));
        s.solve(board);
   }
    
	private int[][] memo = null;//0: unkown, 1: nonchange, 2: change
	private char[][] board = null;
	private boolean flag = true;//need to change
	public void solve(char[][] board) {
	    if(board != null && board.length > 0 && board[0].length > 0) {
	        this.board = board;
	        int row = board.length;
	        int column = board[0].length;
	        memo = new int[row][column];
	        for(int i = 0; i < row; i++) {
	            for(int j = 0; j < column; j++) {
	                if(board[i][j] == 'O') {
	                    if(memo[i][j] == 0) {
	                        flag = true;
	                        List<int[]> visited = new ArrayList();
	                        search(i, j , visited);
	                        if(!flag) {
	                            for(int[] pair : visited) {
	                                memo[pair[0]][pair[1]] = 1;
	                            }
	                        }
	                    }
	                    if(memo[i][j] == 2) {
	                        board[i][j] = 'X';
	                    } 
	                }
	            }
	        }
	    }
	}

	public void search(int i, int j, List<int[]> visited) {
	    int[] pair = {i, j};
	    visited.add(pair);
	    int row = board.length;
	    int column = board[0].length;
	    if(i == 0 || i == row-1 || j == 0 || j == column-1) {
	        memo[i][j] = 1;
	        flag = false;
	    } else {
	        memo[i][j] = 2;
	    }
	    int[] index = {i-1, j, i+1, j, i, j-1, i, j+1};
	    for(int k = 0; k < index.length; k+=2) {
	        int r = index[k];
	        int c = index[k+1];
	        if(r >= 0 && r < row && c >= 0 && c < column && board[r][c] == 'O') {
	            if(memo[r][c] == 0) {
	                search(r, c, visited);
	            }
	        }
	    }
	}
 }
