package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.strStr("mississippi", "issipi"));
//        s.merge(A, 3, B, 3);
   }
    
	public int strStr(String haystack, String needle) {
        if(needle == null || needle.length() == 0) return 0;
        int i = 0, j = 0;
        char[] content = haystack.toCharArray();
        char[] strs = needle.toCharArray();
        int[] next = getNextArray(strs);
        while(i < content.length) {
            if(j == -1 || content[i] == strs[j]) {
                i++;
                j++;
            } else {
                j = next[j];
            }
            if(j == strs.length) return i-j;
        }
        return -1;
    }
    
	public int[] getNextArray(char[] strs) {
        int[] next = new int[strs.length];
        next[0] = -1;
        int i = 0, j = -1;
        int len = strs.length;
        while(i < len) {
            if(j == -1 || strs[i] == strs[j]) {
                i++;
                j++;
                if(i < len) {
                    next[i] = next[i-1]+1;
                }
            } else {
                j = next[j];
            }
        }
        return next;
    }
 }
