package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.romanToInt("LVIII"));
//        s.merge(A, 3, B, 3);
   }
    
	public List<List<Integer>> threeSum(int[] nums) {
        List<List<Integer>> ans = new ArrayList();
        if(nums != null && nums.length >= 3) {
            Arrays.sort(nums);
            int len = nums.length;
            int i = 0;
            while(i < len-2) {
                int num = nums[i];
                int left = i+1;
                int right = len-1;
                while(left < right) {
                    int sum = num+nums[left]+nums[right];
                    if(sum == 0) {
                        List<Integer> list = new ArrayList();
                        list.add(num);
                        list.add(nums[left]);
                        list.add(nums[right]);
                        ans.add(list);
                    } else if(sum > 0) {
                        right--;
                    } else {
                        left++;
                    }
                }
                while(i < len-2 && nums[i] == nums[++i]){}
            }
        }
        return ans;
    }
 }
