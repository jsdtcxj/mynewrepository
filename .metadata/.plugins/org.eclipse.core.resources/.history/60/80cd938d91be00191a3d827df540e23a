package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {1, 3, 2};
//		s.nextPermutation(num1);
//		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		
        System.out.println(s.combinationSum2(num1, 5));
	}
	
	private List<List<Integer>> ans = new ArrayList<List<Integer>>();
    private int target = 0;
    private int[] candidates = null;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        this.candidates = candidates;
        this.target = target;
        Arrays.sort(candidates);
        findCombination(0, 0, new ArrayList<Integer>(), -1);
        return ans;
    }

    public void findCombination(int start, int sum, List<Integer> combs, int prev) {
        if(sum == target) {
            ans.add(combs);
        } else if(sum < target) {
            for(int i = start; i < candidates.length; i++) {
                int num = candidates[i];
                if(num == prev) continue;
                int temp = sum+num;
                if(temp > target) break;

                List<Integer> list = new ArrayList<Integer>();
                list.addAll(combs);
                list.add(num);
                findCombination(i+1, temp, list, num);
            }
        }
    }
}
