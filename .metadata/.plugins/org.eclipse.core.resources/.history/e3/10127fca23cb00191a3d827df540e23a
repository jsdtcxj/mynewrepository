package org.fkit.springboot.test;

import java.util.HashMap;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.lengthOfLongestSubstring("abca"));
//        s.rotate(matrix);
   }
	
	public int lengthOfLongestSubstring(String s) {
	    int ans = 0;
	    int left = 0, right = 0;
	    if(s != null && s.length() > 0) {
	        Map<Character, Integer> map = new HashMap();
	        while(right < s.length()) {
	            char c = s.charAt(right);
	            Integer value = map.get(c);
	            if(value == null || value.intValue() < left) {
	                map.put(c, right);
	                ans = Math.max(ans, right-left+1);
	            } else {
	                left = value.intValue()+1;
	            }
	            right++;
	        }
	    }
	    return ans;
	}
}
