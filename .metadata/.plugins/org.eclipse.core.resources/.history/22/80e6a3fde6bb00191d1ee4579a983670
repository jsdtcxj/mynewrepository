package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] nums = {2, 3, 6, 7};
//		s.nextPermutation(nums);
		
        System.out.println(s.combinationSum(nums, 7));
	}
	
	private List<List<Integer>> list = new ArrayList<List<Integer>>();
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        if(candidates == null || candidates.length == 0 || candidates[0] > target) return list;
        Arrays.sort(candidates);
        
        for(int i = 0; i < candidates.length; i++) {
            int min = candidates[i];
            if(min > target) break;
            int n = target/min;
            addNext(candidates, i, new ArrayList<Integer>(), n, target);
        }
        return list;
    }
    
    public void addNext(int[] candidates, int start, List<Integer> comb, int count, int target) {
        if(count == 0) {
        	System.out.println(comb);
            if(sum(comb) == target) {
                list.add(comb);
            }
        } else {
            for(int i = start; i < candidates.length; i++) {
                int num = candidates[i];
                if(sum(comb)+num > target) break;
                
                List<Integer> nums = new ArrayList<Integer>();
                nums.addAll(comb);
                nums.add(num);
                addNext(candidates, start, nums, count-1, target);
            }
        }
    }
 
    public int sum(List<Integer> comb) {
        int temp = 0;
        for(int n : comb) {
            temp += n;
        }
        return temp;
    }
}
