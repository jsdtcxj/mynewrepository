package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,2,1,0,4};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.numDecodings("226"));
//        s.merge(A, 3, B, 3);
   }
    
	public int numDecodings(String s) {
	    if(s == null || s.length() == 0) return 0;
	    int len = s.length();
	    int[] dp = new int[len];
	    for(int i = 0; i < len; i++) {
	        int n1 = s.charAt(i)-'0';
	        if(n1 > 0) {
	            dp[i] = (i > 0) ? dp[i-1] : 1;
	        } 
	        if(i > 0) {
	            int n2 = s.charAt(i-1)-'0';
	            if(n1 == 1 || (n1 == 2 && n2 <= 6)) {
	                dp[i] += (i > 1) ? dp[i-2] : 1;
	            }
	        }
	    }
	    return dp[len-1];
	}

 }
