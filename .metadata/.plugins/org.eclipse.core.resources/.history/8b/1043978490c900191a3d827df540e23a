package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.strStr("mississippi","issi"));
//        s.rotate(matrix);
   }
	
	public int strStr(String haystack, String needle) {
        if(needle == null || needle.length() == 0) return 0;
        int j = 0;
        char[] content = haystack.toCharArray();
        char[] strs = needle.toCharArray();
        int[] next = populateNext(strs);
        for(int i = 0; i < content.length; i++) {
            if(j == -1 || content[i] == strs[j]) {
                j++;
            } else {
                j = next[j];
            }
            if(j == strs.length) return i-j+1;
        }
        return -1;
    }

    public int[] populateNext(char[] strs) {
        int[] next = new int[strs.length];
        next[0] = -1;
        int i = 0, j = -1;
        while(i < strs.length) {
            if(j == -1 || strs[i] == strs[j]) {
                i++;
                j++;
                if(i < strs.length) {
                    next[i] = j;
                }
            } else {
                j = next[j];
            }
        }

        return next;
    }
}
