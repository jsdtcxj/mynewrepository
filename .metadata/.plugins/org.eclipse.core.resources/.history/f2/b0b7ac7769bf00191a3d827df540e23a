package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {1,2,3};
//		s.nextPermutation(num1);
//		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		
        System.out.println(s.permute(num1));
//        System.out.println(s.ans.size());
   }
	
	List<List<Integer>> ans = new ArrayList<List<Integer>>();
	
	public List<List<Integer>> permute(int[] nums) {
		if(nums == null || nums.length == 0) return ans;
		
		List<Integer> list = new ArrayList<Integer>(nums.length);
		for(int num : nums) {
			list.add(num);
		}
		backTrack(list, 0);
		return ans;
	}
	
	public void backTrack(List<Integer> nums, int first) {
		int size = nums.size();
		if(first == size) {
			ans.add(nums);
		} else {
			for(int i = first; i < size; i++) {
				Collections.swap(nums, first, i);
				backTrack(nums, first+1);
				Collections.swap(nums, first, i);
			}
		}
	}
	
//	public void backtrack(int n,
//            ArrayList<Integer> nums,
//            List<List<Integer>> output,
//            int first) {
//// if all integers are used up
//if (first == n)
//output.add(new ArrayList<Integer>(nums));
//for (int i = first; i < n; i++) {
//// place i-th integer first 
//// in the current permutation
//Collections.swap(nums, first, i);
//// use next integers to complete the permutations
//backtrack(n, nums, output, first + 1);
//// backtrack
//Collections.swap(nums, first, i);
//}
//}
//
//public List<List<Integer>> permute(int[] nums) {
//// init output list
//List<List<Integer>> output = new LinkedList();
//
//// convert nums into list since the output is a list of lists
//ArrayList<Integer> nums_lst = new ArrayList<Integer>();
//for (int num : nums)
//nums_lst.add(num);
//
//int n = nums.length;
//backtrack(n, nums_lst, output, 0);
//return output;
//}


}
