package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {0,0};
//		s.nextPermutation(num1);
//		char[][] board = {{'X','X','X','X'},{'X','O','O','X'},{'X','X','O','X'},{'X','O','X','X'}};
		char[][] board = {{'O','O','O'},{'O','O','O'},{'O','O','O'}};
		int[][] matrix = {{1,3,5,7,9},{2,4,6,8,10},{11,13,15,17,19},{12,14,16,18,20},{21,22,23,24,25}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"hot","dot","dog","lot","log","cog"};
        int[] A = {824,938,1399,5607,6973,5703,9609,4398,8247};
        int[] B = {3,30,34,5,9};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
//        ListNode head = s.new ListNode(4);
//        ListNode n1 = s.new ListNode(2);
//        head.next = n1;
//        ListNode n2 = s.new ListNode(1);
//        n1.next = n2;
//        n1 = s.new ListNode(2);
//        n2.next = n1;
//        n1.next = null;
//        ListNode r = s.sortList(head);
        System.out.println(s.largestNumber(B));
//        System.out.println((char)('A'+25));
//        System.out.println(-3/(-2));
//        s.sortColors(B);
   }
	
	public String largestNumber(int[] nums) {
        String[] strs = new String[nums.length];
        for(int i = 0; i < strs.length; i++) {
            strs[i] = String.valueOf(nums[i]);
        }
        
        Arrays.sort(strs, new Comparator<String>(){
            @Override
            public int compare(String s1, String s2) {
                int len1 = s1.length(), len2 = s2.length();
                if(len1 == len2) {
                    return s1.compareTo(s2);
                } else {
                    int index1 = 0, index2 = 0;
                    while(index1 < len1 && index2 < len2) {
                        char c1 = s1.charAt(index1++);
                        char c2 = s2.charAt(index2++);
                        if(c1 < c2) {
                            return -1;
                        } else if(c1 > c2) {
                            return 1;
                        }
                    }
                    return (index1 < len1) ? (compareChar(s1, index1) ? 1 : -1) : (compareChar(s2, index2) ? -1 : 1);
                }
            }
            
            private boolean compareChar(String s, int index) {
                char c = s.charAt(index);
                for(int i = index-1; i >= 0; i--) {
                    if(c != s.charAt(i)) {
                        return c > s.charAt(i);
                    }
                }
                return true;
            }
        });
        
        StringBuilder sb = new StringBuilder();
        for(int i = nums.length-1; i >= 0; i--) {
            sb.append(nums[i]);
        }
        return sb.toString();
    }
 }
