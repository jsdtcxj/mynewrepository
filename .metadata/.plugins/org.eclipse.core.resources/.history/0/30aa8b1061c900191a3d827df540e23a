package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.divide(7, -3));
//        s.rotate(matrix);
   }
	
	public int divide(int dividend, int divisor) {
	    boolean negative = (dividend^divisor >> 31) == -1;
	    if(divisor == -1) {
	        return (dividend == Integer.MIN_VALUE) ? Integer.MAX_VALUE : (0-dividend);
	    } else if(divisor == 1) {
	        return dividend;
	    }
	    
	    long dividendl = Math.abs((long)dividend);
	    long divisorl = Math.abs((long)divisor);
	    long count = 1, temp = divisorl;
	    while(temp < dividendl) {
	        temp <<= 1;
	        count <<= 1;
	    }
	    
	    int ans = 0;
	    while(temp >= divisorl) {
	        if(dividendl < temp) {
	            temp >>= 1;
	            count >>= 1;
	        } else {
	            dividendl -= temp;
	            ans += count;
	        }
	    }
	    return negative ? (0-ans) : ans;
	}
}
