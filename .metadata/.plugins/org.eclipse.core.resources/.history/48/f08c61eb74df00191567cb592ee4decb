package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {2,7,4,1,8,1};
        int[] B = {9,3,15,20,7};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.uniquePathsWithObstacles(points));
//        s.rotate(matrix);
   }

	public int uniquePathsWithObstacles(int[][] obstacleGrid) {
	    int m = obstacleGrid.length;
	    int n = obstacleGrid[0].length;
	    int[][] dp = new int[m][n];
	    for(int i = 0; i < m; i++) {
	        for(int j = 0; j< n; j++) {
	            if(i == 0 && j == 0) {
	                dp[0][0] = (obstacleGrid[0][0] == 0) ? 1 : 0;
	            } else if(obstacleGrid[i][j] == 0) {
	                int temp = 0;
	                if(i > 0) {
	                    temp = obstacleGrid[i-1][j] == 0 ? dp[i-1][j] : 0;
	                }
	                if(j > 0) {
	                    temp += obstacleGrid[i][j-1] == 0 ? dp[i][j-1] : 0;
	                }
	                dp[i][j] = temp;
	            }
	        }
	    }
	    return dp[m][n];
	}

 }
