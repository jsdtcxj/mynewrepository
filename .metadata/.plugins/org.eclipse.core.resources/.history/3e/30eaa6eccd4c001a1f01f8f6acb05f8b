package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {0,0};
//		s.nextPermutation(num1);
//		char[][] board = {{'X','X','X','X'},{'X','O','O','X'},{'X','X','O','X'},{'X','O','X','X'}};
		char[][] board = {{'O','O','O'},{'O','O','O'},{'O','O','O'}};
		int[][] matrix = {{1,3,5,7,9},{2,4,6,8,10},{11,13,15,17,19},{12,14,16,18,20},{21,22,23,24,25}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"hot","dot","dog","lot","log","cog"};
        int[] A = {824,938,1399,5607,6973,5703,9609,4398,8247};
        int[] B = {2,0,2,1,1,0};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
//        ListNode head = s.new ListNode(4);
//        ListNode n1 = s.new ListNode(2);
//        head.next = n1;
//        ListNode n2 = s.new ListNode(1);
//        n1.next = n2;
//        n1 = s.new ListNode(2);
//        n2.next = n1;
//        n1.next = null;
//        ListNode r = s.sortList(head);
        System.out.println(s.ladderLength(a, b, list));
//        System.out.println((char)('A'+25));
//        System.out.println(-3/(-2));
//        s.sortColors(B);
   }
	
	public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Map<String, List<String>> map = new HashMap();
        for(String s : wordList) {
            populate(map, s);
        }
        
        LinkedList<String> queue = new LinkedList();
        Set<String> used = new HashSet();
        queue.offer(beginWord);
        used.add(beginWord);
        int count = 1;
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                String s = queue.poll();
                System.out.println(s);
                for(int j = 0; j < s.length(); j++) {
                    String key = s.substring(0,i) + "_" + s.substring(i+1);
                    List<String> list = map.getOrDefault(key, new ArrayList());
                    for(String str : list) {
                        if(endWord.equals(str)) {
                            return count+1;
                        }
                        if(!used.contains(str)) {
                            queue.offer(str);
                            used.add(str);
                        }
                    }
                }
            }
            count++;
        }
        return 0;
    }
    
    public void populate(Map<String, List<String>> map, String s) {
        for(int i = 0; i < s.length(); i++) {
            String key = s.substring(0, i) + "_" + s.substring(i+1);
            List<String> list = map.get(key);
            if(list == null) {
                list = new ArrayList();
                map.put(key, list);
            }
            list.add(s);
        }
    }
 }
