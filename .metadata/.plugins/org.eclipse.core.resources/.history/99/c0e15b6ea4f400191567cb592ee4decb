package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,9,20,15,7};
        int[] B = {9,3,15,20,7};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        
        System.out.println(s.buildTree(A, B));
//        s.merge(A, 3, B, 3);
   }
    
	private int[] preorder = null;
    private int[] inorder = null;
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        this.preorder = preorder;
        this.inorder = inorder;
        TreeNode root = null;
        if(preorder != null && preorder.length > 0) {
            root = generate(0, preorder.length-1, 0);
        }
        return root;
    }
    
    public TreeNode generate(int start, int end, int start1) {
        TreeNode node = null;
        if(start <= end) {
            int num = preorder[start++];
            node = new TreeNode(num);
            int count = 0;
            while(inorder[start1+count] != num) {
                count++;
            }
            node.left = generate(start, start+count-1, start1);
            node.right = generate(start+count+1, end, start1+count+1);
        }
        return node;
    }
    
    public class TreeNode {
    	      int val;
    	     TreeNode left;
         TreeNode right;
    	      TreeNode(int x) { val = x; }
    	  }
 }
