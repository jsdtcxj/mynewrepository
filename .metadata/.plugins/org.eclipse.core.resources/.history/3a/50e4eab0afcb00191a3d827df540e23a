package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3},{1,2,3},{1,2,3}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"bella","label","roller"};
        System.out.println(s.commonChars(strs));
//        s.rotate(matrix);
   }
	
	public List<String> commonChars(String[] A) {
        List<String> ans = new ArrayList<String>();
        if(A != null && A.length > 0) {
            String s = A[0];
            int len = A.length;
            for(int i = 1; i < len; i++) {
                if(s.length() > A[i].length()) {
                    s = A[i];
                }
            }
            
            Map<Character, Integer> map = new HashMap();
            for(int i = 0; i < s.length(); i++) {
                char c = s.charAt(i);
                Integer value = map.get(c);
                if(value == null) {
                    map.put(c, 1);
                } else {
                    map.put(c, value.intValue()+1);
                }
            }
            
            Iterator<Character> it = map.keySet().iterator();
            while(it.hasNext()) {
                char key = it.next();
                int count = map.get(key);
                for(int i = 0; i < len; i++) {
                    int count1 = -1;
                    for(int index = -1; index >=0; index = A[i].indexOf((int)key, index+1)) {
                        count1++;
                    }
                    count = Math.min(count, count1);
                    if(count == 0) break;
                    if(i == len-1 && count > 0) {
                        for(int j = 0; j < count; j++) {
                            ans.add(String.valueOf(key));
                        }
                    } 
                }
            }
        }
        return ans;
    }
}
