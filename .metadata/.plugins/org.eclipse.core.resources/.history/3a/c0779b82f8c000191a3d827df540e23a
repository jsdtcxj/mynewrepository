package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {-1,2,-1,2,1,-1,2,1};
//		s.nextPermutation(num1);
//		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}};
        s.rotate(matrix);
        for(int i = 0; i < matrix.length; i++) {
        	for(int j = 0; j < matrix[0].length; j++) {
        		System.out.print(matrix[i][j] + " ");
        	}
        	System.out.println();
        }
//        System.out.println(s.ans.size());
   }
	
	public List<List<String>> groupAnagrams(String[] strs) {
        List<List<String>> ans = ArrayList();
        if(strs.length > 0) {
            Map<String, List<String>> map = new HashMap();
            List<String> list = new ArrayList();
            list.add(strs[0]);
            map.put(strs[0], list);
            
            for(int i = 1; i < strs.length; i++) {
                List<String> list = map.get(strs[i]);
                if(list != null) {
                    list.add(strs[i]);
                } else {
                    boolean found = false;
                    for(String key : map.keySet()) {
                        if(compare(key, strs[i])) {
                            list = map.get(key);
                            list.add(strs[i]);
                            found = true;
                            break;
                        }
                    }
                    if(!found) {
                        list = new ArrayList();
                        list.add(strs[0]);
                        map.put(strs[0], list);
                    }
                }
            }
            Iterator it = map.values().iterator();
            while(it.hasNext()) {
                ans.add(it.next());
            }
        }
        return ans;
    }
    
    public boolean compare(String str1, String str2) {
        int len1 = str1.length();
        int len2 = str2.length();
        if(len1 != len2) {
            return false;
        } else {
            boolean matched = true;
            int[] mapping = new int[26];
            for(int i = 0; i < len1; i++) {
                int c = str1.charAt(i);
                mapping[c-'a']++;
            }
            
            for(int i = 0; i < len1; i++) {
                int c = str2.charAt(i);
                if(--mapping[c-'a'] < 0) {
                    matched = false;
                    break;
                }
            }
            return matched;
        }
    }
}
