package org.fkit.springboot.test;

import java.util.Arrays;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"bella","label","roller"};
        int[] A = {8,20,6,2,20,17,6,3,20,8,12};
        int[] B = {9,3,15,20,7};
        String str = "110101011011000011011111000000";
        System.out.println(s.maxSumTwoNoOverlap(A, 5, 4));
//        s.rotate(matrix);
   }
	//[[10,20],[30,200],[400,50],[30,20]]
	public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        return Math.max(calculate(A, L, M), calculate(A, M, L));
    }

    public int calculate(int[] A, int L, int M) {
        int len = A.length;
        int[] memoL = new int[len-L-M+1];
        int[] memoM = new int[memoL.length];
        int maxL = subSum(A, 0, L-1);
        int sum = maxL;
        memoL[0] = sum;
        for(int i = 1; i <= len-M-L; i++) {
            sum = sum + A[i+L-1] - A[i];
            maxL = Math.max(memoL[i-1], sum);
            memoL[i] = maxL;
        }
        int maxM = subSum(A, L, L+M-1);
        sum = maxM;
        memoM[0] = maxM;
        for(int i = 1; i < len-M-L; i++) {
            sum = sum + A[L+i+M] - A[L+i];
            maxM = Math.max(memoM[i-1], sum);
            memoM[i] = maxM;
        }
        return maxL + maxM;
    }
    
    public int subSum(int[] A, int start, int end) {
        int sum = 0;
        for(int i = start; i <= end; i++) {
            sum += A[i];
        }
        return sum;
    }
}
