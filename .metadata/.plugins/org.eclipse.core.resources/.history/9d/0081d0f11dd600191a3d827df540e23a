package org.fkit.springboot.test;

import java.util.Arrays;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"bella","label","roller"};
        int[] A = {8,20,6,2,20,17,6,3,20,8,12};
        int[] B = {9,3,15,20,7};
        String str = "110101011011000011011111000000";
        System.out.println(s.maxSumTwoNoOverlap(A, 5, 4));
//        s.rotate(matrix);
   }
	//[[10,20],[30,200],[400,50],[30,20]]
	public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int a = maxFunc(A, L, M);
        int b = maxFunc(A, M, L);
        return Math.max(a,b);
    }
    public int maxFunc(int[] A, int L, int M){
        if(L+M>A.length){
            return -1;
        }
        int i,j;
        int max = 0;
        int ret1 = 0;//滑动窗口部分和
        for(i = 0;i<L-1;i++){
            ret1+=A[i];
        }
        for(;i<A.length-M;i++){
            ret1 += A[i];
            int ret2 = 0;
            for(j = i+1;j<i+M;j++){
                ret2+=A[j];
            }
            for(;j<A.length;j++) {
                ret2 += A[j];
                max = Math.max(max, ret1+ret2);
                ret2 -=  A[j-M+1];
            }
            ret1 -= A[i-L+1];
        }
        return max;
    }
	
//	public int maxSumTwoNoOverlap(int[] A, int L, int M) {
//        return Math.max(maxSumTwo(A, L, M), maxSumTwo(A, M, L));
//    }
//    
//    public int maxSumTwo(int[] A, int L, int M) {
//        int[] range = maxRange(A, 0, A.length-1, L);
//        int max1 = range[2], max2 = 0, max3 = 0;
//        int start = range[0], end = range[1], len = A.length;
//        if(start >= M) {
//            range = maxRange(A, 0, start-1, M);
//            max2 = range[2];
//        }
//        if(len-end-1 >= M) {
//            range = maxRange(A, end+1, len-1, M);
//            max3 = range[2];
//        }
//        max1 += Math.max(max2, max3);
//        return max1;
//    }
//    
//    public int[] maxRange(int[] A, int start, int end, int dist) {
//       int[] range = new int[3];
//        range[0] = start;
//        range[1] = dist+start-1;
//        int sum = 0;
//        for(int i = start; i <= range[1]; i++) {
//        	sum += A[i];
//        }
//        int max = sum;
//        for(int i = range[1]+1; i <= end; i++) {
//            sum = sum + A[i] - A[i-dist];
//            if(max < sum ) {
//                range[0] = i-dist+1;
//                range[1] = i;
//                max = sum;
//            }
//        }
//        range[2] = max;
//        return range;
//    }
}
