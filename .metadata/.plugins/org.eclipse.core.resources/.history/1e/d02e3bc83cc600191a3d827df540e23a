package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,5,0,0};
//		s.nextPermutation(num1);
//		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5},{1,2,3,4,5}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {""};
        System.out.println(s.myPow(-3, 3));
   }
	
	public double myPow(double x, int n) {
        boolean isMin = (n == Integer.MIN_VALUE);
        int positive = isMin ? Integer.MAX_VALUE : Math.abs(n);

        int count = 1;
        double ans = 1.0, temp = x;
        while(positive > 0) {
            if(positive >= count) {
                ans *= temp;
                positive -= count;
                count <<= 1;
                temp *= temp;
            } else {
                count = 1;
                temp = x;
            }
        }

        if(isMin) {
            ans = 1 / (ans*x);
        } else {
            boolean isNegative = (n%2 > 0 && x < 0);
            ans = (n < 0) ? 1/ans : ans;
            ans = isNegative ? 0 - ans : ans;
        }
        return ans;
    }
}
