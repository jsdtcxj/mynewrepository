package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,0},{1,0,1,0},{0,1,1,0},{0,0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"bella","label","roller"};
        int[] A = {3,9,20,15,7};
        int[] B = {9,3,15,20,7};
        String str = "110101011011000011011111000000";
        System.out.println(s.numEnclaves(matrix));
//        s.rotate(matrix);
   }
	public int numEnclaves(int[][] A) {
        int row = A.length, column = A[0].length;
        int[][] s = new int[row][column];
        int count = 0;
        //-1 : false, 1: true, 2 not sure
        for(int i = 0; i < row-1; i++) {
            for(int j = 0; j < column-1; j++) {
                if(A[i][j] == 0) {
                    s[i][j] = -1;
                } else {
                    if(i == 0 || j == 0 || i == row-1 || j == column-1) {
                        s[i][j] = 1;
                    } else {
                        s[i][j] = 2;
                        s[i][j] = search(A, s, i, j);  
                        if(s[i][j] == -1) {
                            count++;
                        }
                    }
                }
            }
        }
        return count;
    }
    
    public int search(int[][] A, int[][] s, int i, int j) {
        int[] index = {i, j-1, i-1, j, i+1, j, i, j+1};
        for(int k = 0; k < index.length; k=k+2) {
            int r = index[k], c = index[k+1];
            int n = s[r][c];
            if(n == 1) {
                return 1;
            } else if(n == 0) {
                s[r][c] = 2;
                n = search(A, s, r, c);
                if(n == 1) {
                    return 1;
                }
            }
        }
        return -1;
    }
}
