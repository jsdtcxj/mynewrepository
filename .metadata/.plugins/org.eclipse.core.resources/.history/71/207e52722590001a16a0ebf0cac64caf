package com.chs.coreJava.lock;

import java.util.LinkedList;
import java.util.Random;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ProducerConsumerImpl {
	
	private Lock lock = new ReentrantLock();
	private Condition fullCond = lock.newCondition();
	private Condition emptyCond = lock.newCondition();
	
	private LinkedList<Integer> queue = new LinkedList();
	private Random rd = new Random();
	private final static int CAPACITY = 2;
	
	public void put() {
		lock.lock();
		try {
			while(queue.size() == CAPACITY) {
				fullCond.await();
			}
		} catch (InterruptedException e) {
			e.printStackTrace();
		} finally {
			lock.unlock();
		}
	}
	
	public void get() {
		
	}
}
