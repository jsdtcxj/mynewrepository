package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {2,7,4,1,8,1};
        int[] B = {9,3,15,20,7};
        int[][] points = {{2,3},{4,5},{6,7},{8,9},{1,10}};
        String str = "110101011011000011011111000000";
        System.out.println(s.merge(points));
//        s.rotate(matrix);
   }

	public int[][] merge(int[][] intervals) {
        if(intervals == null || intervals.length < 2) return intervals;
        Arrays.sort(intervals, new Comparator<int[]>(){
            @Override
            public int compare(int[] a, int[] b) {
                return a[0]-b[0];
            }
        });
        
        List<int[]> ans = new ArrayList();
        int start = intervals[0][0], end = intervals[0][1];
        for(int i = 1; i < intervals.length; i++) {
            int start1 = intervals[i][0], end1 = intervals[i][1];
            if(start > end1 || end < start1) {
                int[] range = {start, end};
                ans.add(range);
                start = start1;
                end = end1;
            } else {
                start = Math.min(start, start1);
                end = Math.max(end, end1);
            }
        }
        int[] range = {start, end};
        ans.add(range);
        return ans.toArray(new int[ans.size()][2]);
    }
 }
