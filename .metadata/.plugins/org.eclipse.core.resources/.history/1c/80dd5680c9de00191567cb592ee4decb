package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {2,7,4,1,8,1};
        int[] B = {9,3,15,20,7};
        int[][] points = {{2,3},{4,5},{6,7},{8,9},{1,10}}
        String str = "110101011011000011011111000000";
        System.out.println(s.merge(points));
//        s.rotate(matrix);
   }

	public int[][] merge(int[][] intervals) {
	    List<int[]> ans = new ArrayList();
	    int len = intervals.length;
	    boolean[] used = new boolean[len];
	    for(int i = 0; i < len; i++) {
	        if(!used[i]) {
	            int start1 = intervals[i][0];
	            int end1 = intervals[i][1];
	            used[i] = true;
	            for(int j = i+1; j < len; j++) {
	                if(!used[j]) {
	                    int start2 = intervals[j][0];
	                    int end2 = intervals[j][1];
	                    if(start1 > end2 || end1 < start2) {
	                        continue;
	                    }
	                    start1 = Math.min(start1, start2);
	                    end1 = Math.max(end1, end2);
	                    used[j] = true;
	                    j = i+1;
	                }
	            }
	            int[] range = {start1, end1};
	            ans.add(range);
	        }
	    }
	    
	    return ans.toArray(new int[ans.size()][2]);
	}


 }
