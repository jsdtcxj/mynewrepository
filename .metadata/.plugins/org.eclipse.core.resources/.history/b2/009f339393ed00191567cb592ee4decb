package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,1};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.myPow(2, 10));
//        s.merge(A, 3, B, 3);
   }
    
	public double myPow(double x, int n) {
        if(x == 0 || x == 1) return x;
        if(x == -1) return (n%2 == 0) ? 1 : -1;
        int n1 = (n == Integer.MIN_VALUE) ? Integer.MAX_VALUE : Math.abs(n);
        double temp = x;
        double ans = 1;
        int count = 1;
        while(n1 > 0) {
            ans *= temp;
            n1 -= count;
            count <<= 1;
            if(n1 >= count) {
                temp = temp*temp;
            } else {
                temp = x;
                count = 1;
            }
        }
        return (n < 0) ? 1/ans : ans;
    }
 }
