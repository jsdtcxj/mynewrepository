package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {2,7,4,1,8,1};
        int[] B = {9,3,15,20,7};
        int[][] points = {{2,3},{4,5},{6,7},{8,9},{1,10}};
        String str = "110101011011000011011111000000";
        System.out.println(s.getPermutation(3, 3));
//        s.rotate(matrix);
   }

	public String getPermutation(int n, int k) {
        StringBuilder sb = new StringBuilder();
        char[] nums = new char[n];
        for(int i = 0; i < n; i++) {
            nums[i] = (char)('0'+i+1);
        }

        boolean[] used = new boolean[n];
        for(int i = 0; i < nums.length && k > 0; i++) {
            if(!used[i]) {
                int f = getFactorial(n-sb.length()-1);
                if(k > f) {
                    k -= f;
                } else {
                    sb.append(nums[i]);
                    used[i] = true;
                    i = 0;
                }
            }
        }
        return sb.toString();
    }

    public int getFactorial(int n) {
        int count = 1;
        while(n > 1) {
            count *= n;
            n--;
        }
        return count;
    }

 }
