package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] nums = {1,4};
//		s.nextPermutation(nums);
		char[][]  board = new char[9][9];
		for(int i = 0; i<9; i++) {
			for(int j = 0; j<9; j++) {
				board[i][j] = '1';
			}
		}
        System.out.println(s.isValidSudoku(board));
	}
	
	public boolean isValidSudoku(char[][] board) {
        Map<Integer, Integer>[] rows = new HashMap[9];
        Map<Integer, Integer>[] columns = new HashMap[9];
        Map<Integer, Integer>[] boxes = new HashMap[9];
        
        for(int i = 0; i < 9; i++) {
            rows[i] = new HashMap<Integer, Integer>();
            columns[i] = new HashMap<Integer, Integer>();
            boxes[i] = new HashMap<Integer, Integer>();
        }
        
        for(int i = 0; i < 9; i++) {
            for(int j = 0; j < 9; j++) {
                char c = board[i][j];
                int boxes_index = (i/3)*3 + j/3;
                if(c != '.') {
                    int n = (int)c;
                    rows[i].put(n, rows[i].getOrDefault(n, 0)+1);
                    columns[i].put(n, columns[i].getOrDefault(n, 0)+1);
                    boxes[boxes_index].put(n, boxes[boxes_index].getOrDefault(n, 0)+1);
                    
                    if(rows[i].get(n) > 1 || columns[j].get(n) > 1 || boxes[boxes_index].get(n) > 1) 
                        return false;
                }
            }
        }
        
        return true;
    }
}
