package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] nums = {5,4};
//		s.nextPermutation(nums);
        System.out.println(s.search(nums, 5));
	}
	
	public int search(int[] nums, int target) {
        if(nums == null || nums.length == 0) return -1;
        if(nums.length == 1) return (nums[0] == target) ? 0 : -1;
        int ans = -1;
        int reverse = findReverseIndex(nums);
        if(target > nums[0]) {
            ans = search(nums, 0, reverse, target);
        } else {
            ans = search(nums, reverse, nums.length-1, target);
        }
        return ans;
    }
    
    public int findReverseIndex(int[] nums) {
        int reverse = 0;
        int len = nums.length;
        int start = 0;
        int end = len - 1;
        while(start < end) {
            int mid = (start+end)/2;
            if(start == mid) {
                reverse = end;
                break;
            }
            if(nums[start] > nums[mid]) {
                end = mid;
            } else {
                start = mid;
            }
        }
        return reverse;
    }
    
    public int search(int[] nums, int start, int end, int target) {
        int index = -1;
        while(start <= end) {
            int mid = (start+end)/2;
            if(start == mid) {
                if(nums[start] == target) index = start;
                else if(nums[end] == target) index = end;
                break;
            }
            if(nums[mid] < target) {
                start = mid;
            } else {
                end = mid;
            }
        }
        return index;
    }
}
