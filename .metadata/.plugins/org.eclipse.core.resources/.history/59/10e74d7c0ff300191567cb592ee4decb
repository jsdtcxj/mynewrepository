package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,2,1,0,4};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        
        System.out.println(s.restoreIpAddresses("172162541"));
//        s.merge(A, 3, B, 3);
   }
    
	private List<String> ans = new ArrayList();
	private String s = null;
	public List<String> restoreIpAddresses(String s) {
	    this.s = s;
	    generate(4, new StringBuilder(), 0);
	    return ans;
	}

	public void generate(int count, StringBuilder sb, int start) {
	    if(count == 0 && start == s.length()) {
	        ans.add(sb.toString());
	    } else if(isValidLength(count, start)){
	        int len = s.length();
	        int n1 = s.charAt(start)-'0';
	        generate(count-1, sb.append(n1).append('.'), start+1);
	        sb.delete(sb.length()-2, sb.length());
	        
	        if(n1 > 0 && start+1 < len) {
	            int n2 = s.charAt(start+1)-'0';
	            generate(count-1, sb.append(n1).append(n2).append('.'), start+2);
	            sb.delete(sb.length()-3, sb.length());
	            
	            if(start+2 < len) {
	                int n3 = s.charAt(start+2)-'0';
	                if(n1*100+n2*10+n3 <= 255) {
	                    generate(count-1, sb.append(n1).append(n2).append(n3).append('.'), start+3);
	                    sb.delete(sb.length()-4, sb.length());
	                }
	            }
	        }
	    }
	}

	public boolean isValidLength(int count, int start) {
	    int len = s.length()-start;
	    return len >= count && len <= 3*count;
	}
 }
