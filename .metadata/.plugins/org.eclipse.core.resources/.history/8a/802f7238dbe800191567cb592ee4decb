package org.fkit.springboot.test;

import java.util.HashMap;
import java.util.Map;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.myAtoi("-91283472332"));
//        s.merge(A, 3, B, 3);
   }
    
	public int myAtoi(String str) {
        int ans = 0;
        int index = 0;
        if(str != null && str.length() > 0) {
            int len = str.length();
            while(index < len && str.charAt(index) == ' ') {
                index++;
            }
            if(index < len) {
                char c = str.charAt(index);
                boolean negative = c == '-';
                if(c == '+' || c == '-') {
                    index++;
                }
                while(index < len) {
                    c = str.charAt(index++);
                    if(isNum(c)) {
                        int num = c-'0';
                        if(negative) {
                            if((ans == Integer.MIN_VALUE/10 && num > 8) || ans < Integer.MIN_VALUE/10) {
                                ans = Integer.MIN_VALUE;
                                break;
                            }
                            ans = ans*10 - num;
                        } else {
                            if((ans == Integer.MAX_VALUE/10 && num > 7) || ans > Integer.MAX_VALUE/10) {
                                ans = Integer.MAX_VALUE;
                                break;
                            }
                            ans = ans*10 + num;
                        }
                    } else {
                       break;     
                    }
                }
            }
        }
        return ans;
    }
    
    public boolean isNum(char c) {
        return c >= '0' && c <= '9';
    }
 }
