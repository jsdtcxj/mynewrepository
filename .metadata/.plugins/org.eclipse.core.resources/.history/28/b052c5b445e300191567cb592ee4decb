package org.fkit.springboot.test;

import java.util.Arrays;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
//        System.out.println(s.merge(A, 3, B, 3));
        s.merge(A, 3, B, 3);
   }

	public void merge(int[] nums1, int m, int[] nums2, int n) {
        if(n == 0 || m == 0) {
            for(int i = 0; i < n; i++) {
                nums1[i] = nums2[i];
            }
        } else {
            for(int i = m-1; i >= 0; i--) {
                nums1[i+n] = nums1[i];
            }
            int index = 0, index1 = n, index2 = 0;
            while(index < m+n) {
                if(nums1[index1] < nums2[index2]) {
                    nums1[index++] = nums1[index1++];
                    if(index1 == m+n) {
                        for(int i = 0; i < (n-index2); i++) {
                            nums1[index+i] = nums2[index2+i];
                        }
                        break;
                    }
                } else {
                    nums1[index++] = nums2[index2++];
                    if(index2 == n) {
                        break;
                    }
                }
            }
        }
    }

 }
