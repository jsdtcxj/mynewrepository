package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] nums = {2,3,6,7};
//		s.nextPermutation(nums);
		
        System.out.println(s.combinationSum(nums, 7));
	}
	
	private List<List<Integer>> ans = new ArrayList<List<Integer>>();
    private int target = 0;
    
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        this.target = target;
        Arrays.sort(candidates);
        if(candidates == null || candidates.length == 0) return ans;
        
        findCombination(candidates, 0, 0, new ArrayList<Integer>());
        return ans;
    }
    
    public void findCombination(int[] candidates,int start, int sum, List<Integer> comb) {
        if(sum < target) {
           for(int i = start; i < candidates.length; i++) {
               int num = candidates[i];
               sum += num;
               if(sum > target) break;
               List<Integer> list = new ArrayList<Integer>();
               list.addAll(comb);
               list.add(num);
               findCombination(candidates, i, sum, list);
           } 
        } else if(sum == target) {
            ans.add(comb);
        }
    }
}
