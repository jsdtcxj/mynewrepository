package org.fkit.springboot.test;

import java.util.ArrayList;

import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;


class TreeNode{
	public int val;
	public TreeNode left;
	public TreeNode right;
	public TreeNode(int val) {
		this.val = val;
	}
}

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {0,0};
//		s.nextPermutation(num1);
//		char[][] board = {{'X','X','X','X'},{'X','O','O','X'},{'X','X','O','X'},{'X','O','X','X'}};
		char[][] board = {{'O','O','O'},{'O','O','O'},{'O','O','O'}};
		int[][] matrix = {{1,3,5,7,9},{2,4,6,8,10},{11,13,15,17,19},{12,14,16,18,20},{21,22,23,24,25}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"hot","dot","dog","lot","log","cog"};
        int[] A = {824,938,1399,5607,6973,5703,9609,4398,8247};
        int[] B = {1,5,1,1,6,4};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
//        ListNode head = s.new ListNode(4);
//        ListNode n1 = s.new ListNode(2);
//        head.next = n1;
//        ListNode n2 = s.new ListNode(1);
//        n1.next = n2;
//        n1 = s.new ListNode(2);
//        n2.next = n1;
//        n1.next = null;
//        ListNode r = s.sortList(head);
//        System.out.println(s.longestSubstring("abcdedghijklmnopqrstuvwxyz", 3));
//        System.out.println((char)('A'+25));
//        System.out.println(-3/(-2));
//        s.wiggleSort(B);
        TreeNode t = new TreeNode(4);
        TreeNode t1 = new TreeNode(2);
        TreeNode t2 = new TreeNode(5);
        t.left = t1;
        t.right = t2;
        TreeNode t3 = new TreeNode(1);
        TreeNode t4 = new TreeNode(3);
//        t1.left = t3;
        t1.right = t4;
        t = s.convert(t);
        while(t != null) {
        	System.out.println(t.val);
        	if(t.right == null) t1 = t;
        	t = t.right;
        }
        System.out.println("******");
        while(t1 != null) {
        	System.out.println(t1.val);
        	t1 = t1.left;
        }
   }

	
	private TreeNode head = null;
    private TreeNode prev = null;
    public TreeNode convert(TreeNode root) {
        if(root != null) {
            iterate(root);
        }
        return head;
    }
    
    public void iterate(TreeNode node) {
        if(node.left != null) iterate(node.left);
        if(head == null) {
            head = node;
            prev = node;
        } else {
            prev.right = node;
            node.left = prev;
            prev = node;
        }
        
        if(node.right != null) iterate(node.right);
    }
 }
