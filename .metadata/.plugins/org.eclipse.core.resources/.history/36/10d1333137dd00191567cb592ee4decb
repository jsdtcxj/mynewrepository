package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'5','3','.','.','7','.','.','.','.'},{'6','.','.','1','9','5','.','.','.'},{'.','9','8','.','.','.','.','6','.'},{'8','.','.','.','6','.','.','.','3'},{'4','.','.','8','.','3','.','.','1'},{'7','.','.','.','2','.','.','.','6'},{'.','6','.','.','.','.','2','8','.'},{'.','.','.','4','1','9','.','.','5'},{'.','.','.','.','8','.','.','7','9'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {6,7,7,6,9};
        int[] B = {9,3,15,20,7};
        int[][] points = {{2,3},{4,5},{6,7},{8,9},{1,10}};
        String str = "110101011011000011011111000000";
        System.out.println(s.getPermutation(4, 9));
//        s.rotate(matrix);
   }
	
	public String getPermutation(int n, int k) {
        char[] nums = new char[n];
        for(int i = 1; i <= n; i++) {
            nums[i-1] = (char)(i+'0');
        }
        getNext(nums, 0, k);
        return new String(nums);
    }
    
    public boolean getNext(char[] nums, int start, int k) {
        int len = nums.length;
        boolean flag = true;
        for(int i = start; i < len && flag; i++) {
            if(i == len-1) {
                return false;    
            }
            int f = getFactorial(len-start-1);
            if(f >= k) {
                char temp = nums[start];
                nums[start] = nums[i];
                nums[i] = temp;
                flag = getNext(nums, start+1, k);
            } else {
                k -= f;
            }
        }
        return true;
    }
    
    public int getFactorial(int num) {
        int f = 1;
        for(int i = num; i > 0; i--) {
            f = f*num;
        }
        return f;
    }
 }
