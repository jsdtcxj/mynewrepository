package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {0,0};
//		s.nextPermutation(num1);
//		char[][] board = {{'X','X','X','X'},{'X','O','O','X'},{'X','X','O','X'},{'X','O','X','X'}};
		char[][] board = {{'O','O','O'},{'O','O','O'},{'O','O','O'}};
		int[][] matrix = {{1,3,5,7,9},{2,4,6,8,10},{11,13,15,17,19},{12,14,16,18,20},{21,22,23,24,25}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"hot","dot","dog","lot","log","cog"};
        int[] A = {824,938,1399,5607,6973,5703,9609,4398,8247};
        int[] B = {3,30,34,5,9};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
//        ListNode head = s.new ListNode(4);
//        ListNode n1 = s.new ListNode(2);
//        head.next = n1;
//        ListNode n2 = s.new ListNode(1);
//        n1.next = n2;
//        n1 = s.new ListNode(2);
//        n2.next = n1;
//        n1.next = null;
//        ListNode r = s.sortList(head);
        System.out.println(s.largestNumber(B));
//        System.out.println((char)('A'+25));
//        System.out.println(-3/(-2));
//        s.sortColors(B);
   }
	
	public String largestNumber(int[] nums) {
        String[] strs = new String[nums.length];
        for(int i = 0; i < strs.length; i++) {
            strs[i] = String.valueOf(nums[i]);
        }
        
        quickSort(strs, 0, strs.length-1);
        
        StringBuilder sb = new StringBuilder();
        for(int i = strs.length-1; i >= 0; i--) {
            sb.append(strs[i]);
        }
        return sb.charAt(0) == '0' ? "0" : sb.toString();
    }
    
    public void quickSort(String[] strs, int start, int end) {
        if(start < end) {
            int index = split(strs, start, end);
            quickSort(strs, start, index-1);
            quickSort(strs, index+1, end);
            String[] strs2 = new String[end-start+1];
            for(int i = start; i < end; i++) {
                strs2[i-start] = strs[i];
            }
            int index1 = start, index2 = index+1;
            int idx = 0;
            while(index1 < index || index2 <= end) {
                if(index1 < index && (index2 > end || lessThan(strs2[index1], strs2[index2]))) {
                    strs[idx++] = strs2[index1++];
                } else {
                    strs[idx++] = strs2[index2++];
                }
            }
        }
    }
    
    public int split(String[] strs, int start, int end) {
        String s = strs[0];
        int index = start;
        while(start < end) {
            while(start < end && !lessThan(strs[end], s)) {
                end--;
            }
            while(start < end && lessThan(strs[start], s)) {
                start++;
            }
            if(start < end) {
                swap(strs, start, end);
            }
        }
        swap(strs, index, start);
        return start;
    }
    
    public void swap(String[] strs, int i, int j) {
        if(i != j) {
            String s = strs[i];
            strs[i] = strs[j];
            strs[j] = s;
        }
    }
    
    public boolean lessThan(String s1, String s2) {
        return (s1+s2).compareTo(s2+s1) <= 0 ? true : false;
    }
 }
