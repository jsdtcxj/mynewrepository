package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,2,1,0,4};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        ListNode dummy = s.new ListNode(-1);
        ListNode node = s.new ListNode(1);
        dummy.next = node;
        node.next = s.new ListNode(2);
        node = node.next;
        node.next = s.new ListNode(3);
        node = node.next;
        node.next = s.new ListNode(4);
        node = node.next;
        node.next = s.new ListNode(5);
        node = node.next;
        
        System.out.println(s.reverseBetween(dummy.next, 2, 4));
//        s.merge(A, 3, B, 3);
   }
    
	public ListNode reverseBetween(ListNode head, int m, int n) {
        ListNode dummy = new ListNode(-1);
        dummy.next = head;
        n -= m;
        head = dummy;
        while(m > 1) {
            head = head.next;
            m--;
        }
        System.out.println(head.val);
        ListNode first = head.next;
        ListNode second = first.next;
        ListNode third = second.next;
        while(n > 1) {
            second.next = first;
            first = second;
            second = third;
            third = second.next;
            n--;
        }
        head.next.next = third;
        head.next = second;
        return dummy.next;
    }
	 
	public class ListNode {
	      int val;
	     ListNode next;
	     ListNode(int x) { val = x; }
	 }
 }
