package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0},{0,1,0},{0,0,0}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {3,9,20,15,7};
        int[] B = {9,3,15,20,7};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        String a = "hit";
        String b = "cog";
        List<String> list = Arrays.asList("hot","dot","dog","lot","log","cog");
        
        System.out.println(s.ladderLength(a, b, list));
//        s.merge(A, 3, B, 3);
   }
    
	private int ans = 0;
	private boolean found = false;
	private Map<String, List<String>> map = new HashMap();
	private String endWord = null;
	public int ladderLength(String beginWord, String endWord, List<String> wordList) {
	    this.endWord = endWord;
	    int len = beginWord.length();
	    for(String s : wordList) {
	        for(int i = 0; i < len; i++) {
	            String key = s.substring(0,i) + "*" + s.substring(i+1, len);
	            List<String> list = map.getOrDefault(key, new ArrayList());
	            list.add(s);
	            map.put(key, list);
	        }
	    }
	    Set<String> visited = new HashSet();
	    visited.add(beginWord);
	    search(beginWord, 1, visited);
	    return ans;
	}

	public void search(String word, int count, Set<String> visited) {
	    int len = word.length();
	    for(int i = 0; !found && i < len; i++) {
	        String key = word.substring(0,i) + "*" + word.substring(i+1, len);
	        List<String> list = map.get(key);
	        if(list == null) continue;
	        for(String s : list) {
	            if(!found && s.equals(endWord)) {
	                ans = count+1;
	                found = true;
	            } else {
	                visited.add(s);
	                search(s, count+1, visited);
	                visited.remove(s);
	            }
	        }
	    }
	}
 }
