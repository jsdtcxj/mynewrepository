package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.restoreIpAddresses("25525511135"));
//        s.merge(A, 3, B, 3);
   }

	private List<String> list = new ArrayList();
    public List<String> restoreIpAddresses(String s) {
        search(s, 4, 0, new StringBuilder());
        return list;
    }
    
    public boolean isValid(String s, int count, int start) {
        int len = s.substring(start).length();
        return len >= count && len <= count*3;
    }
    
    public void search(String s, int count, int start, StringBuilder sb) {
        if(count == 0) {
            int len = sb.length();
            if(s.length()+4 == len) {
                list.add(sb.substring(0,len-1));
            }        
        } else if(isValid(s, count, start)){
            int len = s.length();
            int n1 = Integer.parseInt(s.substring(start, start+1));
            sb.append(n1).append('.');
            search(s, count-1, start+1, sb);
            sb.delete(sb.length()-2, sb.length());
            
            if(n1 != 0 && start+1 < len) {
                int n2 = Integer.parseInt(s.substring(start, start+2));
                sb.append(n2).append('.');
                search(s, count-1, start+2, sb);
                sb.delete(sb.length()-3, sb.length());
                
                if(start+2 < len) {
                    int n3 = Integer.parseInt(s.substring(start, start+3));
                    if(n3 <= 255) {
                        sb.append(n3).append('.');
                        search(s, count-1, start+3, sb);
                        sb.delete(sb.length()-4, sb.length());
                    }
                }
            }
        }
    }

 }
