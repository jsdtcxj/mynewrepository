package org.fkit.springboot.test;

import java.util.ArrayList;
import java.util.List;

public class Solution {
	
	public static void main(String[] args) {
		Solution s = new Solution();
		String[] as = {"flower","flow","flight"};
//		System.out.println(s.longestCommonPrefix(as));
		int[] num1 = {2,3,1};
//		s.nextPermutation(num1);
		char[][] board = {{'A','B','C','E'},{'S','F','E','S'},{'A','D','E','E'}};
		int[][] matrix = {{0,0,0,1,1,1,0,1,0,0},{1,1,0,0,0,1,0,1,1,1},{0,0,0,1,1,1,0,1,0,0},{0,1,1,0,0,0,1,0,1,0},{0,1,1,1,1,1,0,0,1,0},{0,0,1,0,1,1,1,1,0,1},{0,1,1,0,0,0,1,1,1,1},{0,0,1,0,0,1,0,1,0,1},{1,0,1,0,1,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,1}};
//        s.rotate(matrix);
//        for(int i = 0; i < matrix.length; i++) {
//        	for(int j = 0; j < matrix[0].length; j++) {
//        		System.out.print(matrix[i][j] + " ");
//        	}
//        	System.out.println();
//        }
        String[] strs = {"czvh","zczpzvdhx","zczpzvh","zczpzvhx","zcpzvh"};
        int[] A = {1,2,3,0,0,0};
        int[] B = {2,5,6};
        int[][] points = {{0,0,0},{0,1,0},{0,0,0}};
        String str = "110101011011000011011111000000";
        System.out.println(s.numTrees(2));
//        s.merge(A, 3, B, 3);
   }
    
    public int numTrees(int n) {
        List<TreeNode> prev = new ArrayList();
        prev.add(null);
        List<TreeNode> cur = new ArrayList();
        for(int i = 1; i <= n; i++) {
            cur = new ArrayList();
            for(TreeNode root : prev) {
                TreeNode prevNode = copy(root);
                TreeNode node = new TreeNode(i);
                node.left = prevNode;
                cur.add(node);
                
                TreeNode node1 = root;
                while(node1 != null) {
                    prevNode = copy(root);
                    cur.add(prevNode);
                    while(prevNode.right != null && node1.right != null &&  prevNode.right.val != node1.right.val) {
                        prevNode = prevNode.right;
                    }
                    node = new TreeNode(i);
                    node.left = prevNode.right;
                    prevNode.right = node;
                    node1 = node1.right;   
                }
            }
            prev = cur;
        }
        return cur.size();
    }
    
    public TreeNode copy(TreeNode root) {
        TreeNode node = null;
        if(root != null) {
            node = new TreeNode(root.val);
            node.left = copy(root.left);
            node.right = copy(root.right);
        }
        return node;
    }
    public class TreeNode {
    	      int val;
    	      TreeNode left;
    	      TreeNode right;
    	      TreeNode(int x) { val = x; }
    	  }
 }
